{"version":3,"sources":["SeasonDisplay.js","Spinner.js","App.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","latitude","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","err","this","renderContent","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CAAEC,KAAM,sBAAuBC,SAAU,OACjDC,OAAQ,CAAEF,KAAM,qBAAsBC,SAAU,eAuBnCE,EAZO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SACd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,UAAKT,EAAL,6BACZ,4BAAKD,EAAL,mBACA,uBAAGU,UAAS,UAAKT,EAAL,gCCrBZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCoBAG,E,4MA7BbC,MAAQ,CAAEC,SAAU,KAAMC,aAAc,I,kEAEnB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEP,SAAUM,EAASE,OAAOR,cACxD,SAACS,GAAD,OAAS,EAAKF,SAAS,CAAEN,aAAcQ,EAAIb,e,sCAI7C,OAAIc,KAAKX,MAAME,eAAiBS,KAAKX,MAAMC,SAClC,uCAAaU,KAAKX,MAAME,eAE5BS,KAAKX,MAAME,cAAgBS,KAAKX,MAAMC,SAEvC,6BACE,kBAAC,EAAD,CAAeX,IAAKqB,KAAKX,MAAMC,WAC/B,8BAKC,kBAAC,EAAD,CAASJ,QAAQ,qC,+BAIxB,OAAO,yBAAKF,UAAU,cAAcgB,KAAKC,qB,GA1B3BC,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.01de7d8b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SeasonDisplay.css\";\r\n\r\nconst seasonConfig = {\r\n  summer: { text: \"Let's hit the beach\", iconName: \"sun\" },\r\n  winter: { text: \"Burr, it is chilly\", iconName: \"snowflake\" },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`${iconName} icon massive icon-left`} />\r\n      <h1>{text} in your place!</h1>\r\n      <i className={`${iconName} icon massive icon-right`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends React.Component {\r\n  state = { latitude: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => this.setState({ latitude: position.coords.latitude }),\r\n      (err) => this.setState({ errorMessage: err.message })\r\n    );\r\n  }\r\n  renderContent() {\r\n    if (this.state.errorMessage && !this.state.latitude) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n    if (!this.state.errorMessage && this.state.latitude) {\r\n      return (\r\n        <div>\r\n          <SeasonDisplay lat={this.state.latitude} />\r\n          <br />\r\n          {/* <h4>Latitude: {this.state.latitude} </h4> */}\r\n        </div>\r\n      );\r\n    }\r\n    return <Spinner message=\"Please accept location request\" />;\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"border red\">{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}